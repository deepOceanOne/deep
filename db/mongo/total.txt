
Grunt plugin for z-schema, a JSON Schema validator. === grunt-z-schema === Grunt plugin for z-schema, a JSON Schema validator.This plugin requires Grunt.If you haven't used Grunt before, be sure to check out the Getting Started guide, as it explains how to create a Gruntfile as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:In your project's Gruntfile, add a section named zschema to the data object passed into grunt.initConfig().Options for strict validation. Any option defined here will be passed over to ZSchema instance.Example:In this example, post1.json and post2.json are two JSON files that will be validated against the post-schema.json schema. All JSON files in the comments will be validated against the comment schema. All validations will also report unknown keywords.If you don't have any actual JSON files but still need to validate the schema itself for syntactic and other errors:The test will print out validation errors for the tasks designed to fail. That is expected behaviour. Unfortunately, Grunt does not really provide a good way to test that a task failed. If you come across a better solution please let me know.See CHANGELOG.mdCopyright (c) 2014 Petr Bela. Licensed under the MIT license.
Z-order curve index for level-db === level-z === levelZ creates a sublevel db with the passed in name, that will insert items using
their z-order index, so they can easily be queried by location. Items can still
be retrieved efficiently by their primary id (this now requires 2 lookups rather than 1).the new db has the following methods:Note: currently bounding box results are not filtered, so they may contain locations near
the search area that are slightly outside the bounding box.
z-index scaling variables from Unfancy framework === @unfancy/var-z-index === The Unfancy framework module var-z-index exported as standalone package.Using npm:In JavaScript:In CSS:See the documentation or package source for more details.
Css module of single purpose classes for z index === css-z-index === Css module of single purpose classes for z indexImport the css moduleThen process the CSS using the tachyons-cliThe built CSS is located in the css directory. It contains an unminified and minified version.
You can either cut and paste that css or link to it directly in your html.The source CSS files can be found in the src directory.
Running $ npm start will process the source CSS and place the built CSS in the css directory.MIT
z core lib === z-lib === ERROR: No README data found!
Translation module with dynamic json storage in Redis and suport npm: express, z-form... === z-i18n === Download and install test project at (New version 1.0.2): https://github.com/kimthangatm/test-node-js-z-i18n/New tutorial Node Js Mutiple language & more .. at : https://kimtatthang.wordpress.com/2015/03/11/multiple-languages-i18n-l10n-in-your-node-js-express-and-redis/Translation module with dynamic json storage in Redis and suport npm: express, z-form...When APP Node JS firt run, translation loaded loaded from file or Redis and never reload => FastMy computer is MacOS 10.10.2 and currently Redis version is 2.8.19, you can use guide bellow or visit: http://redis.io/download to download and install redis serverNote: When Node Js application running, translation save on Redis, if you want reload cache please follow:Typing into terminalOpen terminal and typingOpen test-i18n/app.js and copy/pate bellow code after: var app = express();Open terminal and typingAddress: 127.0.0.1:3000 . App use default ‚Äúen_GB‚ÄùAddress: 127.0.0.1:3000?lang=nl_NL . App switch language ‚Äúnl_NL‚ÄùAddress: 127.0.0.1:3000?lang=vi_VN . Because ‚Äúvi_VN‚Äù lang don‚Äôt have tranlation key ‚Äúhello_user_name‚Äù, system get default ‚Äúhello_user_name‚Äù in default_language = ‚Äúen_GB‚Äù
pattern matching for javascript === z === Native pattern matching for Javascript.The example above is using Javascript ECMAScript 6 (ES6), but you can use z with traditional JavaScript as well, just isn't that pretty:The pattern matching "trick" in z is: each match is a function, where function parameters describes the pattern. Simple and powerful, eh?Rule of thumb: when the match has more than one parameter, the last parameter will be always the end of the array (tail).NOTE: This is only available on ES6 with default parameters.Value comparison in pattern matching is very powerful and makes the code cleaner, eg.:Currently you need to put the flag --harmony_default_parameters in your Node.js application to enable ES6 default parameters. Don't be afraid, this will be enabled by default at some new Node.js version.It's OK, just put the value comparison inside your matches, eg.:We all love the old JavaScript, the same pattern matching written in traditional JavaScript using z:He did, years ago! But his first and greater Javascript pattern match library create matches with strings, and this is ugly! (sorry). Maybe he thought this is ugly too and he did a new pattern matching library without strings, but need to install some macro stuff.. and well, I don't think that's nice either.Why z was created? Because IT'S BEAUTIFUL: No need to install nothing but the actual z library, the matches are real native javascript code, the patterns are written naturally, pure ‚ù§Ô∏è. Of course it hasn't all the features on these mentioned libraries due JavaScript limitations, but it supports the most used patterns to work with arrays, enhancing recursion and immutability code writing.Besides matches, z also provides 4 new methods in JavaScript Arrays to facilitate working with recursion and immutabilityI expect some help for new ideas, bug report, pull requests, and making new friends üëØüëØDon't be afraid, I'm not expert on functional programming, so I really need help, feel free to contact me üëç
A PostCSS plugin to replace z with z-index. === postcss-z === A PostCSS plugin to replace z with z-index.Input:Output:Install:Then include the plugin:See PostCSS docs for examples for your environment.Released under the MIT license.
Stylelint rule for setting minimum and maximum constraint value for z-index. === stylelint-number-z-index-constraint === Stylelint rule for setting minimum and maximum constraint value for z-index.Add this config to your .stylelintrc:From CSS Tricks article:It's fairly common to see people number in the hundreds with z-index in web design too. The idea being that you could slip something in between later if need be, which you couldn't if you did 1, 2, 3, etc, because z-index doesn't support decimals.This rule also handles negative values.The following patterns are considered warnings:The following patterns are not considered warnings:The following patterns are considered warnings:The following patterns are not considered warnings:MIT ¬© Ivan Nikoliƒá
A handy Sass helper for managing z-index layers === sass-z-indexer === A handy Sass helper for managing z-index layersThis repository is based on Hugo Giraudel Solution.This project is licensed under the terms of the MIT License.
Underscore mixins for Z === z-underscore === Underscore mixins for Z
JavaScript builtin mixins for Z === z-builtins === A plugin for Z, the utility library for JavaScript promises.The z-builtins plugin exposes all native JavaScript methods directly on Z promises.The easiest way to get started is to use a ready-made package of Z, like z-std-pack. It includes this plugin.If you want to set it up yourself, you have a number of options:npm install z-builtins and then var zBuiltins = require('z-builtins');bower install z-builtinsDownload it manually from the dist folder of this repo.When installed, you apply the plugin by calling Z.mixin(zBuiltins). Note that you have to install Z first, if you're not using a ready-made package.Go to the Z main page to learn what Z does.The idea behind this particular plugin, z-builtins, is to expose all the standard JavaScript methods available on strings, arrays and other types of objects directly on promises wrapping them. It allows you to do things like:All the usual methods are available directly on promises. Instead of returning their results directly (which would be impossible, since the promise might not have resolved) they in turn return new promises. Those new promises also have all the expected methods. And so on. Down to turtles.The only time you have to treat these objects diferently then you have treated regular objects is when you call global functions like console.log. If the list of toddlers from above was used like this, then console.log(listOfToddlers) would just print "[object Object]" since  listOfToddlers is not actually as string; it's a promise. Instead, either do listOfToddlers.then(function(list) { console.log(list)); }; or simply listOfToddlers.log().Except then explicitly noted, all methods below will invoke their native counterparts directly. All quirks and bugs will still get to you. As will all fixes and performance improvements in the future.Note that toString has not been overridden to return a promise. It will return a string as always. That is to follow the principle of least surprise. If you want to call toString on the value that the promise resolves to, then you can use toStr.The methods followed by a star are mutator methods in the JavaScript standard library. They change the object they act upon and return something else.Mutating behaviour doesn't work well with promises. Therefore, these methods do not mutate when used in Z. Their usual return values are ignored and instead they return the new array produced.Note: The operators yield, void, new, , and the assignment operators are not available.These functions use the promised value as their first argument. Remaining arguments can be given as usual.The length method returns the value of the length property.The isArray method invokes Array.iArray.The log method invoked console.log.The print method invokes JSON.stringify followed by console.log.
Easily manage highest and lowest z-indexes on the DOM. === z-index-manager === Z-Index Manager will easily manage highest and lowest z-indexes on the DOM.jsRun iqb start in the root directory to run a demo application with Z-Index Manager.
Calculates the z-score (also known as standard score, z-value and normal score) for numeric object attributes. === z-score === Calculates the z-score (also known as standard score, z-value and normal score) for numeric object attributes.npm install z-score
Analize z-index property in CSS code === css-z === Analize z-index property in CSS code.The MIT License (MIT)Copyright (c) 2014 Masaaki Morishita
Dead simple CSS z-index utilities. === z-index === A tiny and dead simple set of CSS z-index utilities.The z space in CSS can easily become arbitrarily increased over time as new
components are added. You've probably seen something like this before in CSS
source code...and some time later...In practice we generally don't need more than a few layers at any one time
even across fairly complex apps.By adopting a small range of values that mimics the (inverse) of the HTML heading
spec, that we can apply directly to any html element, we prevent the need to
declare z-indexes on the fly, and keep the mental model of "layers" easy to
understand while developing.Other than the 6 basic indexes, a zF class is included that forces a very high
z-index in the event that another component or library is being overzealous
with its z-index values and you just can't even.
Set z-index value relatively and manage easily === z-manager === Set z-index value relatively and manage easily.Create .zmanagerc and edit this file.All of selectors have z-index property are written in .zmanagerc.Sort property in ascending order of z-index value you want.and, run bellow command:The MIT License (MIT)Copyright (c) 2014 Masaaki Morishita
Tachyons css module for setting z-index on elements === tachyons-z-index === Base CSS module for TachyonsImport the css moduleThen process the CSS using the tachyons-cliThe built CSS is located in the css directory. It contains an unminified and minified version.
You can either cut and paste that css or link to it directly in your html.The source CSS files can be found in the src directory.
Running $ npm start will process the source CSS and place the built CSS in the css directory.MIT
Z Combinator for self-referencing anonymous functions === z-combinator === Version: 0.1.1
Master build: 
Develop build: This library provides a utility function to support the creation of self-referencing anonymous functions.
It can be installed in whichever way you prefer, but I recommend NPM.The Z Combinator is the same, in principle, as the Y Combinator except it works in languages with applicative (eager)
order of execution (arguments are evaluated before the function call) just like JavaScript.For more information about the Z Combinator please read Douglas Crockford's "The Little JavaScripter".Just as you would with any other recursive function, make sure you include some sort of break condition.
If you miss it out, the function will recur indefinitely.I accept contributions to the source via Pull Request,
but passing unit tests must be included before it will be considered for merge.If you have Vagrant installed, you can build the dev environment to assist development.
The repository will be mounted in /srv.The content of this library is released under the MIT License by Andrew Lawson.
You can find a copy of this license at http://www.opensource.org/licenses/mit or in LICENSE
A simple module for operations on arbitrarily large integers, because sometimes 64-bit floats don't quite cut it. === z-math === A simple module for operations on arbitrarily large integers, because sometimes 64-bit floats don't quite cut it. In future versions, I plan to add support for operations on Z_n (i.e. modular arithmetic and multiplication), as well as some common number theory algorithms such as calculating gcd, lcm, etc.To download the package simply run npm install --save z-math. Then just require it into your app like follows, and you are good to go: var integer = require('z-math')Once you have the package imported you can create new integers with the integer(n) command where n is a regular integer in Javascript (technically a floating point number).To convert an integer, say a, back to a JavaScript float use a.toFloat() or use it in the context of a mathematical operation, e.g. a + 5.To convert an integer, say b, to a string, use b.toString(), or use it in the context of a string e.g. console.log('The integer is: ' + b)Then the remaining operations are defined as follows:Add 2 integers: integer.add(a, b)Subtract 2 integers: integer.subtract(a, b)Multiply 2 integers: integer.multiply(a, b)Get the quotient when dividing 2 integers: integer.quotient(a, b)Get the modulus when dividing 2 integers: integer.mod(a, b)Find a to the power of b: integer.pow(a, b)To test equality/inequality there are a number of functions: integer.greaterThan, integer.lessThan, integer.equal, integer.notEqual, integer.greaterThanEqual, integer.lessThanEqualNote that you can use integer.lte and integer.gte as shortcuts for integer.lessThanEqual and integer.greaterThanEqual respectively.All of these operations return new integers and leave the original ones untouched.
